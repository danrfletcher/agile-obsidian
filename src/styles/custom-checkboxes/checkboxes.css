/* Task icon styling – clean-room implementation (no external fonts) */
:root {
	--task-icon: "";
	--task-fg: currentColor;
	--task-size: 1em; /* tweak icon size */
	--task-offset-y: 0.1em; /* vertical nudging */
}

/* Make rendered checkboxes visible regardless of container/theme */
li > input[type="checkbox"],
li > p > input[type="checkbox"] {
	opacity: 1 !important;
	visibility: visible !important;
	display: inline-block !important;
}

/* Base hook for editor tokens and rendered checkboxes
   Apply ONLY to custom tokens (not [ ], [x], [X], [""]) */
.markdown-source-view.mod-cm6
	.task-list-item-checkbox[data-task]:not([data-task=" "]):not(
		[data-task="x"]
	):not([data-task="X"]):not([data-task=""])::before,
.cm-s-obsidian
	span.hmd-hidden-token.cm-formatting-task[data-task]:not(
		[data-task=" "]
	):not([data-task="x"]):not([data-task="X"]):not([data-task=""])::before,
/* Rendered/reading/preview/custom views – support both li > input and li > p > input */
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> input[type="checkbox"]::before,
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> p > input[type="checkbox"]::before {
	content: var(--task-icon);
	display: inline-block;
	color: var(--task-fg);
	font-size: var(--task-size);
	line-height: 1;
	transform: translateY(var(--task-offset-y));
	margin-right: 0.15em;
}

/* Ensure default checkbox visuals don’t fight ours
   Apply ONLY to custom tokens */
.markdown-source-view.mod-cm6
	.task-list-item-checkbox[data-task]:not([data-task=" "]):not(
		[data-task="x"]
	):not([data-task="X"]):not([data-task=""]),
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> input[type="checkbox"],
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> p > input[type="checkbox"] {
	background: transparent !important;
	box-shadow: none !important;
}

/* Optional: normalize strike behavior
   Keep strike for [x] and [-]; remove it for other custom tokens when .chkbx-strike is not set */
body:not(.chkbx-strike)
	.markdown-source-view.mod-cm6
	.HyperMD-task-line[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="-"]),
body:not(.chkbx-strike) .task-list-item.is-checked:not([data-task="x"]):not([data-task="-"]) {
	text-decoration: none !important;
}

/* Checked text variants (edit as you prefer) */
.HyperMD-task-line[data-task="x"],
.task-list-item.is-checked[data-task="x"] {
  font-weight: 600;
}

/* Ensure cancelled [-] is struck through and greyed out like [x] */
.HyperMD-task-line[data-task="-"],
.task-list-item.is-checked[data-task="-"] {
  color: var(--lines, var(--text-faint));
  text-decoration: line-through !important;
  text-decoration-thickness: inherit;
  text-decoration-color: currentColor;
  opacity: 0.8; /* subtle dim effect */
  font-weight: inherit; /* keep same weight as other tasks */
}

/* Token → icon + color mapping */
:root.theme-dark {
	--col-q: #fdaf00;
	--col-h: #5c7699;
	--col-d: #3e4552;
	--col-i: #c22a2a;
	--col-a: #f872b5;
	--col-R: #aab3ca;
	--col-id: #e7e7ab;
	--col-B: #885ee9;
	--col-P: #4fa54f;
	--col-C: #cf4343;
	--col-N: #855b41;
	--col-b: #e6813f;
	--col-I: #528bd4;
	--col-c: #95e9ee;
	--col-r: #f9be7b;
}
:root.theme-light {
	--col-q: #fdaf00;
	--col-h: #a8b1bd;
	--col-d: #cad3eb;
	--col-i: #db0101;
	--col-a: #f872b5;
	--col-R: #9fbadf;
	--col-id: #cac700;
	--col-B: #b676ff;
	--col-P: #4fa54f;
	--col-C: #d66c6c;
	--col-N: #a16a49;
	--col-b: #fb924c;
	--col-I: #528bd4;
	--col-c: #95d9ee;
	--col-r: #f9be7b;
}

/* Helper to assign icon/color per token */
[data-task] {
	--task-icon: "";
	--task-fg: var(--text-normal);
}

/* [X] Checked */
[data-task="X"] {
	--task-icon: "✔️";
	--task-fg: var(--text-accent, var(--accent));
}
/* [>] Forward */
[data-task=">"] {
	--task-icon: "➤";
}
/* [D] Deferred / Calendar */
[data-task="D"] {
	--task-icon: "📅";
	--task-fg: var(--col-h);
}
/* [-] Cancelled / line */
[data-task="-"] {
	--task-icon: "❌";
	--task-fg: var(--col-d);
}
/* [?] Question */
[data-task="?"] {
	--task-icon: "❓";
	--task-fg: var(--col-q);
}
/* [!] Important */
[data-task="!"] {
	--task-icon: "❗";
	--task-fg: var(--col-i);
}
/* [+] Add */
[data-task="+"] {
	--task-icon: "➕";
	--task-fg: var(--col-a);
}
/* [/] Half done */
[data-task="/"] {
	--task-icon: "⛛";
	--task-fg: var(--text-accent, var(--accent));
}
/* [R] Review */
[data-task="R"] {
	--task-icon: "🔎";
	--task-fg: var(--col-R);
}
/* [i] Idea */
[data-task="i"] {
	--task-icon: "💡";
	--task-fg: var(--col-id);
}
/* [B] Brainstorm */
[data-task="B"] {
	--task-icon: "💭";
	--task-fg: var(--col-B);
}
/* [P] Pro */
[data-task="P"] {
	--task-icon: "👍";
	--task-fg: var(--col-P);
}
/* [C] Con */
[data-task="C"] {
	--task-icon: "👎";
	--task-fg: var(--col-C);
}
/* [I] Info */
[data-task="I"] {
	--task-icon: "ℹ️";
	--task-fg: var(--col-I);
}
/* [Q] Quote (closing) */
[data-task="Q"] {
	--task-icon: "🔊";
	--task-fg: var(--col-R);
}
/* [N] Note */
[data-task="N"] {
	--task-icon: "📝";
	--task-fg: var(--col-N);
}
/* [b] Bookmark */
[data-task="b"] {
	--task-icon: "⛔";
	--task-fg: var(--col-b);
}
/* [p] Prioritize */
[data-task="p"] {
	--task-icon: "→";
	--task-fg: var(--col-R);
}
/* [E] Example */
[data-task="E"] {
	--task-icon: "✎";
	--task-fg: var(--col-I);
}
/* [L] Location */
[data-task="L"] {
	--task-icon: "📍";
	--task-fg: var(--col-N);
}
/* [A] Answer */
[data-task="A"] {
	--task-icon: "🅰️";
	--task-fg: var(--col-P);
}
/* [r] Recurring */
[data-task="r"] {
	--task-icon: "🔁";
	--task-fg: var(--col-r);
}
/* [c] Choice */
[data-task="c"] {
	--task-icon: "🔘";
	--task-fg: var(--col-c);
}
/* [o] Option */
[data-task="o"] {
	--task-icon: "⚙️";
	--task-fg: var(--col-b);
}
/* [d] Doing */
[data-task="d"] {
	--task-icon: "⚬";
	--task-fg: var(--col-I);
}
/* [T] Time */
[data-task="T"] {
	--task-icon: "⏰";
	--task-fg: var(--col-R);
}
/* [@] Person / Character */
[data-task="@"] {
	--task-icon: "👤";
	--task-fg: var(--col-b);
}
/* [t] Talk */
[data-task="t"] {
	--task-icon: "💬";
	--task-fg: var(--col-R);
}
/* [O] Outline */
[data-task="O"] {
	--task-icon: "🗂️";
}
/* [W] World */
[data-task="W"] {
	--task-icon: "🌍";
	--task-fg: var(--col-P);
}
/* [F] Foreshadow */
[data-task="F"] {
	--task-icon: "🌘";
	--task-fg: var(--col-h);
}
/* [f] Clue / Find */
[data-task="f"] {
	--task-icon: "🧭";
	--task-fg: var(--col-N);
}
/* [~] Conflict */
[data-task="~"] {
	--task-icon: "⚔️";
	--task-fg: var(--col-C);
}
/* [H] Health */
[data-task="H"] {
	--task-icon: "❤️";
	--task-fg: var(--col-a);
}
/* [&] Symbolism */
[data-task="&"] {
	--task-icon: "♾️";
	--task-fg: var(--col-B);
}
/* [s] Secret */
[data-task="s"] {
	--task-icon: "🔒";
	--task-fg: var(--col-d);
}
[data-task="w"] {
	--task-icon: "⏳";
	--task-fg: var(--col-d);
}

/* Make sure the native checkbox mark doesn't overlay our icon
   Apply ONLY to custom tokens (not [ ], [x], [X], [""]) */

/* Rendered/reading/preview/custom views – remove the native box so only the emoji shows */
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> input[type="checkbox"],
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> p > input[type="checkbox"],
/* Editor – same for the source checkbox */
.markdown-source-view.mod-cm6
	.task-list-item-checkbox[data-task]:not([data-task=" "]):not(
		[data-task="x"]
	):not([data-task="X"]):not([data-task=""]) {
	appearance: none;
	-webkit-appearance: none;
	width: 1em;
	height: 1em;
	margin-right: 0.25em;
	position: relative;

	/* Hide the visible box entirely */
	border: none !important;
	background: transparent !important;
	box-shadow: none !important;
	outline: none !important;
}

/* Ensure no box reappears on interactive states */
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> input[type="checkbox"]:is(:hover, :focus, :active, :checked),
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> p > input[type="checkbox"]:is(:hover, :focus, :active, :checked),
.markdown-source-view.mod-cm6
	.task-list-item-checkbox[data-task]:not([data-task=" "]):not(
		[data-task="x"]
	):not([data-task="X"]):not([data-task=""]):is(:hover, :focus, :active, :checked) {
	border: none !important;
	background: transparent !important;
	box-shadow: none !important;
	outline: none !important;
}

/* Center the emoji for custom tokens (rendered + editor) */
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> input[type="checkbox"]::before,
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> p > input[type="checkbox"]::before,
.markdown-source-view.mod-cm6
	.task-list-item-checkbox[data-task]:not([data-task=" "]):not(
		[data-task="x"]
	):not([data-task="X"]):not([data-task=""])::before {
	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
	margin: 0;
}

/* Hide the theme’s masked check layer ONLY for custom tokens */
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> input[type="checkbox"]:checked::after,
li[data-task]:not([data-task=" "]):not([data-task="x"]):not([data-task="X"]):not([data-task=""])
	> p > input[type="checkbox"]:checked::after,
.markdown-source-view.mod-cm6
	.task-list-item-checkbox[data-task]:not([data-task=" "]):not(
		[data-task="x"]
	):not([data-task="X"]):not([data-task=""]):checked::after {
	content: none !important;
	-webkit-mask-image: none !important;
	background: none !important;
}

/* Strict isolation mode: NEVER alter defaults [ ], [x], [X] (including data-task="")
   Remove any baseline or safety reset rules for defaults to let Obsidian/theme handle them */